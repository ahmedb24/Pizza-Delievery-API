/*
 * Frontend Logic for application
 *
 */

// Container for frontend application
var app = {};

// Config
app.config = {
  'sessionToken' : false
};

// AJAX Client (for RESTful API)
app.client = {}

// Interface for making API calls
app.client.request = function(headers,path,method,queryStringObject,payload,callback){

  // Set defaultspayload
  headers = typeof(headers) == 'object' && headers !== null ? headers : {};
  path = typeof(path) == 'string' ? path : '/';
  method = typeof(method) == 'string' && ['POST','GET','PUT','DELETE'].indexOf(method.toUpperCase()) > -1 ? method.toUpperCase() : 'GET';
  queryStringObject = typeof(queryStringObject) == 'object' && queryStringObject !== null ? queryStringObject : {};
  payload = typeof(payload) == 'object' && payload !== null ? payload : {};
  callback = typeof(callback) == 'function' ? callback : false;

  // For each query string parameter sent, add it to the path
  var requestUrl = path+'?';
  var counter = 0;
  for(var queryKey in queryStringObject){
     if(queryStringObject.hasOwnProperty(queryKey)){
       counter++;
       // If at least one query string parameter has already been added, preprend new ones with an ampersand
       if(counter > 1){
         requestUrl+='&';
       }
       // Add the key and value
       requestUrl+=queryKey+'='+queryStringObject[queryKey];
     }
  }

  // Form the http request as a JSON type
  var xhr = new XMLHttpRequest();
  xhr.open(method, requestUrl, true);
  xhr.setRequestHeader("Content-type", "application/json");

  // For each header sent, add it to the request
  for(var headerKey in headers){
     if(headers.hasOwnProperty(headerKey)){
       xhr.setRequestHeader(headerKey, headers[headerKey]);
     }
  }

  // If there is a current session token set, add that as a header
  if(app.config.sessionToken){
    xhr.setRequestHeader("token", app.config.sessionToken.id);
    xhr.setRequestHeader("isloggedin", true);
  } else {
    xhr.setRequestHeader("isloggedin", false);
  }

  // When the request comes back, handle the response
  xhr.onreadystatechange = function() {
      if(xhr.readyState == XMLHttpRequest.DONE) {
        var statusCode = xhr.status;
        var responseReturned = xhr.responseText;

        // Callback if requested
        if(callback){
          try{
            var parsedResponse = JSON.parse(responseReturned);
            callback(statusCode,parsedResponse);
          } catch(e){
            callback(statusCode,responseReturned);
          }

        }
      }
  }

  // Send the payload as JSON
  var payloadString = JSON.stringify(payload);
  xhr.send(payloadString);

};

// Bind the required buttons
app.bindGeneralButtons = function(){
  if (document.querySelector('#button')) {
    const buttons = document.querySelectorAll('#button');

    buttons.forEach(button => {
      button.addEventListener("click", function(e){
    
        // Stop it from redirecting anywhere
        e.preventDefault();
    

        //Handle Logout button click
        if (e.target.innerText == 'Logout') {
          //Log the user out
          app.logUserOut();
        }   
        
        if (e.target.innerText == '') {  
          //Handle Logo button click
          app.client.requestTemplate('/');
        }
        
        //Handle Sign Up button click
        if (e.target.innerText == 'Sign Up' || e.target.innerText == 'Sign In and Order') {  
          app.client.requestTemplate('/user/account/create');
        }
        
        //Handle Login button click
        if (e.target.innerText == 'Login' || e.target.innerText == 'LOGIN AGAIN') {  
          app.client.requestTemplate('/user/session/create');
        }
        
        //Handle Account Settings button click
        if (e.target.innerText == 'Account Settings') {  
          app.client.requestTemplate('/user/account/edit');
        }
        
        //Handle Account Deleted button click
        if (e.target.innerText == 'Account Deleted') {  
          app.client.requestTemplate('/user/account/deleted');
        }
        
        //Handle Dashboard button click
        if (e.target.innerText == 'Dashboard') {  
          app.client.requestTemplate('/menu/list');
        }
        
        //Handle Cart button click
        if (e.target.className == 'cart') {  
          app.client.requestTemplate('/user/cart/list');
        }
        
        //Handle Cart button click
        if (e.target.innerText == 'Add to Cart' ) {  
          if (app.config.sessionToken) {
            app.performItemAdditionToCart(e);
          }
        }
      });
    });
  }
};

// Log the user out then redirect them
app.logUserOut = (redirectUser) => {
  // Set redirectUser to default to true
  redirectUser = typeof(redirectUser) == 'boolean' ? redirectUser : true;

  // Get the current token id
  var tokenId = typeof(app.config.sessionToken.id) == 'string' ? app.config.sessionToken.id : false;

  // Send the current token to the tokens endpoint to delete it
  var header = {
    email: app.config.sessionToken.email_address
  }
  
  var queryStringObject = {
    'id' : tokenId
  };
  app.client.request(header,'api/tokens','DELETE',queryStringObject,undefined,function(statusCode,responsePayload){
    // Set the app.config token as false
    app.setSessionToken(false);

    //Clear cart globally and on local storage 
    app.clearCart();
    
    // Send the user to the logged out page
    if(redirectUser){
      app.client.requestTemplate('/user/session/deleted');
    }
    
  });
};

app.clearCart = () => {
  app.config.cart = false;
  localStorage.setItem('cart', false);
}

//Get a template from server
app.client.requestTemplate = (path) => {
  app.client.request(undefined, path, 'GET', undefined, undefined, (statusCode, response) => {
    
    //Replace current webpage with new webpage from server
    const html = document.querySelector('html');
    const doc = document.createElement('html');
    doc.innerHTML = response;
    html.parentNode.removeChild(html);
    window.document.append(doc);
  
    //Create a new entry in the browsers history without reloading the page
    window.history.pushState({}, '', `http://localhost:3000${path}`);
    
    //Replace the the current entry in the browsers history without reloading the page 
    window.history.replaceState({}, '', `http://localhost:3000${path}`);
    
    //Delay page display for 100ms
    app.delayPageDisplayFor100ms();

    //Add the loggedIn class to body 
    if (app.config.sessionToken) {
      app.setLoggedInClass(true);
    } else {
      app.setLoggedInClass(false);
    }

    //Call the init function as we just reloded
    app.init();
  });

}

//Delay the page from displaying for 30ms
app.delayPageDisplayFor100ms = () => {

  document.querySelector('body').style.display = 'none';
    setTimeout(() => {
      document.querySelector('body').style.display = 'block';
    },100);
}

//Bind the forms
app.bindForms = function(){
  if(document.querySelector("form")){

    var allForms = document.querySelectorAll("form");
    for(var i = 0; i < allForms.length; i++){
        allForms[i].addEventListener("submit", function(e){

        // Stop it from submitting
        e.preventDefault();
        var formId = this.id;
        var path = this.action;
        var method = this.method.toUpperCase();

        // Hide the error message (if it's currently shown due to a previous error)
        document.querySelector("#"+formId+" .formError").style.display = 'none';

        // Hide the success message (if it's currently shown due to a previous error)
        if(document.querySelector("#"+formId+" .formSuccess")){
          document.querySelector("#"+formId+" .formSuccess").style.display = 'none';
        }

        // Turn the inputs into a payload
        var payload = {};
        var elements = this.elements;
        for(var i = 0; i < elements.length; i++){
          if(elements[i].type !== 'submit'){
            // Determine the value of element
            var valueOfElement = elements[i].value;
            // Override the method of the form if the input's name is _method
            var nameOfElement = elements[i].name;
            if(nameOfElement == '_method'){
              method = valueOfElement;
            } else {
              // Create a payload field named "method" if the elements name is actually httpmethod
              if(nameOfElement == 'httpmethod'){
                nameOfElement = 'method';
              }
              // Create an payload field named "id" if the elements name is actually uid
              if(nameOfElement == 'uid'){
                nameOfElement = 'id';
              }
              payload[nameOfElement] = valueOfElement;
            }
          }
        }

        // If the method is DELETE, the payload should be a queryStringObject instead
        var queryStringObject = method == 'DELETE' ? payload : {};

        //If method is DELETE, set the accountDelete key to be true, default to null 
        var deletedHeader = {accountDeleted:true};
        var headers = method == 'DELETE' ? deletedHeader : null;

        // Call the API
        app.client.request(headers,path,method,queryStringObject,payload,function(statusCode,responsePayload){
          // Display an error on the form if needed
          if(statusCode !== 200){

            if(statusCode == 403){
              // log the user out
              app.logUserOut();

            } else {

              // Try to get the error from the api, or set a default error message
              var error = typeof(responsePayload.Error) == 'string' ? responsePayload.Error : 'An error has occured, please try again';

              // Set the formError field with the error text
              document.querySelector("#"+formId+" .formError").innerHTML = error;

              // Show (unhide) the form error field on the form
              document.querySelector("#"+formId+" .formError").style.display = 'block';
            }
          } else {
            // If successful, send to form response processor
            app.formResponseProcessor(formId,payload,responsePayload);
          }

        });
      });
    }
  }
};

//Form response processor
app.formResponseProcessor = function(formId,requestPayload,responsePayload){
  var functionToCall = false;
  // If account creation was successful, try to immediately log the user in
  if(formId == 'accountCreate'){
    // Take the email address and password, and use it to log the user in
    var newPayload = {
      'email_address' : requestPayload.email_address,
      'password' : requestPayload.password
    };

    app.client.request(undefined,'api/tokens','POST',undefined,newPayload,function(newStatusCode,newResponsePayload){
      // Display an error on the form if needed
      if(newStatusCode !== 200){

        // Set the formError field with the error text
        document.querySelector("#"+formId+" .formError").innerHTML = 'Sorry, an error has occured. Please try again.';

        // Show (unhide) the form error field on the form
        document.querySelector("#"+formId+" .formError").style.display = 'block';

      } else {
        // If successful, set the token and redirect the user
        app.setSessionToken(newResponsePayload);
        app.client.requestTemplate('/menu/list');
      }
    });
  }
  // If login was successful, set the token in localstorage and redirect the user
  if(formId == 'sessionCreate'){
    app.setSessionToken(responsePayload);
    app.client.requestTemplate('/menu/list');
  }

  // If forms saved successfully and they have success messages, show them
  var formsWithSuccessMessages = ['accountEdit1', 'accountEdit2','checksEdit1'];
  if(formsWithSuccessMessages.indexOf(formId) > -1){
    document.querySelector("#"+formId+" .formSuccess").style.display = 'block';
  }

  // If the user just deleted their account, redirect them to the account-delete page
  if(formId == 'accountEdit3'){
    app.logUserOut(false);
    app.client.requestTemplate('/user/account/deleted');
  }
};

// Set the session token in the app.config object as well as localstorage
app.setSessionToken = function(token){
  app.config.sessionToken = token;
  var tokenString = JSON.stringify(token);
  localStorage.setItem('token',tokenString);
  if(typeof(token) == 'object'){
    app.setLoggedInClass(true);
  } else {
    app.setLoggedInClass(false);
  }
};

// Set (or remove) the loggedIn class from the body
app.setLoggedInClass = function(add){
  var target = document.querySelector("body");
  // var target2 = document.querySelector("cartDisplay");
  if(add){
    target.classList.add('loggedIn');
    // target2.classList.add('cartDisplay');
  } else {
    target.classList.remove('loggedIn');
    // target2.classList.add('cartDisplay');
  }
};

//Add an item to cart
app.performItemAdditionToCart = (e) => {
  const cart =  typeof(app.config.cart) == 'object' && app.config.cart instanceof Array ? app.config.cart : []; 

  const itemNameToAdd = e.target.parentNode.parentNode.children[1].innerText;
  var itemsChecked = 0;
  var itemsToCheck = cart.length;

  //If there is at least one item in the cart, got to next step
  if (app.config.cart.length > 0) {
    cart.every(item => {
      //If item to add to cart is already in cart then increment it's quantity or else put it in
      if (item.name == itemNameToAdd) {
        //Item is in cart so increment its quantity
        item.quantity++;
        app.setCartItem(item);
        return false;
      } 
     
      itemsChecked++;

      if (itemsChecked == itemsToCheck) {
        //Item is not in cart so put it in
        app.addItem(itemNameToAdd);
      }

      //Proceed to next item
      return true;
    });
  } else {
    app.addItem(itemNameToAdd);
  }
}

//Add an item to cart
app.addItem = (itemNameToAdd) => {
  const itemToAdd = {
    "name": itemNameToAdd,
    "quantity": 1
  }
  app.setCartItem(itemToAdd);
}

//Try to get cart from client or server and proceed to next step (addNewItemToCartAndPersist)
app.setCartItem = function(cartItem){  
  cartItem = typeof(cartItem) == 'object' && cartItem !== null && cartItem !== {} ? cartItem : false;
  
  //Do nothing if cartItem is invalid
  if (cartItem) {
    var cart = typeof(app.config.cart) == 'object' && app.config.cart instanceof Array ? app.config.cart : false;
    if (cart) {
      //Found cart in client side, so use it
      app.addNewItemToCartAndPersist(cart, cartItem);
    } else {
      //No cart in client side, try to get it from the server
      app.client.request(undefined, '/api/carts', 'GET', undefined, undefined, (statusCode, response) => {
        if (statusCode === 200) {
          //Got cart from server!, add new item
          app.addNewItemToCartAndPersist(response.userCart, cartItem); 
        } else {
          //Still no cart from server, default to an empty array, add the new item and persist to storage; client and server
          cart = [];
          app.addNewItemToCartAndPersist(cart, cartItem);
        }
      });
    }
  };
} 

//Add a new item to cart and persist to storage; client and server
app.addNewItemToCartAndPersist = (cart, cartItem) => {
  cart.push(cartItem);
  
  //Stringify the cart object to persist to local storage
  cart = JSON.stringify(cart);
  localStorage.setItem('cart',false);
  localStorage.setItem('cart',cart);

  //Try to parse the cart string back to JSON object, to persist to server 
  try {
    cart = JSON.parse(cart);
    app.client.request(undefined, '/api/carts', 'POST', undefined, {cart}, (statusCode, response) => {
      if (statusCode === 200) {
        //TODO delete this
        console.log(response);
      }
    });
  } catch (error) {
  }
}

//Get the session token from localstorage and set it in the app.config object
app.getSessionToken = function(){
  var tokenString = localStorage.getItem('token');
  if(typeof(tokenString) == 'string'){
    try{
      var token = JSON.parse(tokenString);
      app.config.sessionToken = token;
      if(typeof(token) == 'object'){
        app.setLoggedInClass(true);
      } else {
        app.setLoggedInClass(false);
      }
    }catch(e){
      app.config.sessionToken = false;
      app.setLoggedInClass(false);
    }
  }
};

// Get the cart from localstorage and set it in the app.config object
app.getCartItems = function(){
  var cart = localStorage.getItem('cart');
  cart = typeof(cart) == 'string' && cart.length > 0 ? cart : false;
  try {
    cart = JSON.parse(cart);
    app.config.cart = cart;
  } catch (error) {
    app.config.cart = false;
  }
};

// Renew the token
app.renewToken = function(callback){
  var currentToken = typeof(app.config.sessionToken) == 'object' ? app.config.sessionToken : false;
  if(currentToken){
    // Update the token with a new expiration
    var payload = {
      'id' : currentToken.id,
      'extend' : true,
    };
    app.client.request(undefined,'api/tokens','PUT',undefined,payload,function(statusCode,responsePayload){
      // Display an error on the form if needed
      if(statusCode == 200){
        // Get the new token details
        var queryStringObject = {'id' : currentToken.id};
        app.client.request(undefined,'api/tokens','GET',queryStringObject,undefined,function(statusCode,responsePayload){
          // Display an error on the form if needed
          if(statusCode == 200){
            app.setSessionToken(responsePayload);
            callback(false);
          } else {
            app.setSessionToken(false);
            callback(true);
          }
        });
      } else {
        app.setSessionToken(false);
        callback(true);
      }
    });
  } else {
    app.setSessionToken(false);
    callback(true);
  }
};

// Load data on the page
app.loadDataOnPage = function(){
  // Get the current page from the body class
  var bodyClasses = document.querySelector("body").classList;
  var primaryClass = typeof(bodyClasses[0]) == 'string' ? bodyClasses[0] : false;

  // Logic for account settings page
  if(primaryClass == 'accountEdit'){
    app.loadAccountEditPage();
  }

  // Logic for dashboard page
  if(primaryClass == 'checksList'){
    app.loadChecksListPage();
  }

  // Logic for check details page
  if(primaryClass == 'checksEdit'){
    app.loadChecksEditPage();
  }
};

// Load the account edit page specifically
app.loadAccountEditPage = function(){
  // Get the email address from the current token, or log the user out if none is there
  var email_address = typeof(app.config.sessionToken.email_address) == 'string' ? app.config.sessionToken.email_address : false;
  if(email_address){
    // Fetch the user data
    var queryStringObject = {
      'email_address' : email_address
    };
    app.client.request(undefined,'api/users','GET',queryStringObject,undefined,function(statusCode,responsePayload){
      if(statusCode == 200){
        // Put the data into the forms as values where needed
        document.querySelector("#accountEdit1 .nameInput").value = responsePayload.name;
        document.querySelector("#accountEdit1 .displayEmailInput").value = responsePayload.email_address;

        // Put the hidden email field into both forms
        var hiddenEmailInputs = document.querySelectorAll("input.hiddenEmailInput");
        for(var i = 0; i < hiddenEmailInputs.length; i++){
          hiddenEmailInputs[i].value = responsePayload.email_address;
        }
      } else {
        // If the request comes back as something other than 200, log the user our (on the assumption that the api is temporarily down or the users token is bad)
        app.logUserOut();
      }
    });
  } else {
    app.logUserOut();
  }
};

// Load the dashboard page specifically
app.loadChecksListPage = function(){
  // Get the phone number from the current token, or log the user out if none is there
  var phone = typeof(app.config.sessionToken.phone) == 'string' ? app.config.sessionToken.phone : false;
  if(phone){
    // Fetch the user data
    var queryStringObject = {
      'phone' : phone
    };
    app.client.request(undefined,'api/users','GET',queryStringObject,undefined,function(statusCode,responsePayload){
      if(statusCode == 200){

        // Determine how many checks the user has
        var allChecks = typeof(responsePayload.checks) == 'object' && responsePayload.checks instanceof Array && responsePayload.checks.length > 0 ? responsePayload.checks : [];
        if(allChecks.length > 0){

          // Show each created check as a new row in the table
          allChecks.forEach(function(checkId){
            // Get the data for the check
            var newQueryStringObject = {
              'id' : checkId
            };
            app.client.request(undefined,'api/checks','GET',newQueryStringObject,undefined,function(statusCode,responsePayload){
              if(statusCode == 200){
                var checkData = responsePayload;
                // Make the check data into a table row
                var table = document.getElementById("checksListTable");
                var tr = table.insertRow(-1);
                tr.classList.add('checkRow');
                var td0 = tr.insertCell(0);
                var td1 = tr.insertCell(1);
                var td2 = tr.insertCell(2);
                var td3 = tr.insertCell(3);
                var td4 = tr.insertCell(4);
                td0.innerHTML = responsePayload.method.toUpperCase();
                td1.innerHTML = responsePayload.protocol+'://';
                td2.innerHTML = responsePayload.url;
                var state = typeof(responsePayload.state) == 'string' ? responsePayload.state : 'unknown';
                td3.innerHTML = state;
                td4.innerHTML = '<a href="/checks/edit?id='+responsePayload.id+'">View / Edit / Delete</a>';
              } else {
                console.log("Error trying to load check ID: ",checkId);
              }
            });
          });

          if(allChecks.length < 5){
            // Show the createCheck CTA
            document.getElementById("createCheckCTA").style.display = 'block';
          }

        } else {
          // Show 'you have no checks' message
          document.getElementById("noChecksMessage").style.display = 'table-row';

          // Show the createCheck CTA
          document.getElementById("createCheckCTA").style.display = 'block';

        }
      } else {
        // If the request comes back as something other than 200, log the user our (on the assumption that the api is temporarily down or the users token is bad)
        app.logUserOut();
      }
    });
  } else {
    app.logUserOut();
  }
};


// Load the checks edit page specifically
app.loadChecksEditPage = function(){
  // Get the check id from the query string, if none is found then redirect back to dashboard
  var id = typeof(window.location.href.split('=')[1]) == 'string' && window.location.href.split('=')[1].length > 0 ? window.location.href.split('=')[1] : false;
  if(id){
    // Fetch the check data
    var queryStringObject = {
      'id' : id
    };
    app.client.request(undefined,'api/checks','GET',queryStringObject,undefined,function(statusCode,responsePayload){
      if(statusCode == 200){

        // Put the hidden id field into both forms
        var hiddenIdInputs = document.querySelectorAll("input.hiddenIdInput");
        for(var i = 0; i < hiddenIdInputs.length; i++){
            hiddenIdInputs[i].value = responsePayload.id;
        }

        // Put the data into the top form as values where needed
        document.querySelector("#checksEdit1 .displayIdInput").value = responsePayload.id;
        document.querySelector("#checksEdit1 .displayStateInput").value = responsePayload.state;
        document.querySelector("#checksEdit1 .protocolInput").value = responsePayload.protocol;
        document.querySelector("#checksEdit1 .urlInput").value = responsePayload.url;
        document.querySelector("#checksEdit1 .methodInput").value = responsePayload.method;
        document.querySelector("#checksEdit1 .timeoutInput").value = responsePayload.timeoutSeconds;
        var successCodeCheckboxes = document.querySelectorAll("#checksEdit1 input.successCodesInput");
        for(var i = 0; i < successCodeCheckboxes.length; i++){
          if(responsePayload.successCodes.indexOf(parseInt(successCodeCheckboxes[i].value)) > -1){
            successCodeCheckboxes[i].checked = true;
          }
        }
      } else {
        // If the request comes back as something other than 200, redirect back to dashboard
        window.location = '/checks/all';
      }
    });
  } else {
    window.location = '/checks/all';
  }
};

// Loop to renew token often
app.tokenRenewalLoop = function(){
  setInterval(function(){
    app.renewToken(function(err){
      if(!err){
        console.log("Token renewed successfully @ "+Date.now());
      }
    });
  },1000 * 60 * 60);
};

// Init (bootstrapping)
app.init = function(){

  // Bind all form submissions
  app.bindForms();

  // Bind logout logout button
  app.bindGeneralButtons();

  // Get the token from localstorage
  app.getSessionToken();

  //Get the cart from localstorage
  app.getCartItems();

  // Renew token
  app.tokenRenewalLoop();

  // Load data on page
  app.loadDataOnPage();
};

// Call the init processes after the window loads
window.onload = function(){
  app.init();
};
